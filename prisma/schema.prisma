generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model Tag {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  product Product[]
}

model Likes {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model Product {
  id              Int           @id @default(autoincrement())
  title           String
  content         String
  images          String[]
  imageUrl        String
  tags            Tag[]
  comments        Comment[]
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  createdAt       DateTime      @default(now())
  likes           Likes[]
  saleProduct     SaleProduct[]
  discount        Float
  rates           Rate[]
  price           Decimal
  pieces          Decimal
  stripeProductId String
  stripePriceId   String
}

model Rate {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int      @unique
  userId    Int
  rate      RateType
}

model Sale {
  id                Int           @id @default(autoincrement())
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int
  totalPrice        Decimal
  verified          Boolean       @default(false)
  checkoutSessionId String
  saleProducts      SaleProduct[]
}

model SaleProduct {
  id            Int     @id @default(autoincrement())
  productId     Int
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  numberOfItems Int
  saleId        Int
  sale          Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  totalPrice    Decimal
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  createdAt DateTime  @default(now())
  lastName  String
  firstName String
  password  String
  comments  Comment[]
  role      Roles     @default(USER)
  payment   Sale[]
  likes     Likes[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Roles {
  ADMIN
  USER
}

enum RateType {
  star1
  star2
  star3
  star4
  star5
}
